---
###
# Copyright 2018 IBM Corp. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

- name: determine version
  set_fact:
    __ibm_infosvr_version: "{{ ibm_infosvr_media_bin.server_tarball[4:8] }}"
  listen:
    - "set IBM InfoSphere Information Server variables"
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: setup variables for subsequent role use
  set_fact:
    ibm_infosvr_hosts:
      domain: "{{ groups['ibm-information-server-domain'][0] }}"
      repo: "{{ groups['ibm-information-server-repo'][0] }}"
      engine: "{{ groups['ibm-information-server-engine'][0] }}"
      client: "{% if groups['ibm-information-server-clients'] is defined and (groups['ibm-information-server-clients']|length > 0) %}{{ groups['ibm-information-server-clients'][0] }}{% else %}{% endif %}"
      ug: "{% if groups['ibm-information-server-ug'] is defined and (groups['ibm-information-server-ug']|length > 0) %}{{ groups['ibm-information-server-ug'][0] }}{% else %}{% endif %}"
      cognos: "{% if groups['ibm-cognos-report-server'] is defined and (groups['ibm-cognos-report-server']|length > 0) %}{{ groups['ibm-cognos-report-server'][0] }}{% else %}{% endif %}"
      bpm: "{% if groups['ibm-bpm'] is defined and (groups['ibm-bpm']|length > 0) %}{{ groups['ibm-bpm'][0] }}{% else %}{% endif %}"
      exdb: "{% if groups['ibm-information-server-external-db'] is defined and (groups['ibm-information-server-external-db']|length > 0) %}{{ groups['ibm-information-server-external-db'][0] }}{% else %}{% endif %}"
    ibm_infosvr_users:
      isadmin: "{{ ibm_infosvr_user_isadmin }}"
      dsadm: "{{ ibm_infosvr_user_dsadmin }}"
      db2inst1: "{{ ibm_infosvr_user_db2_instance }}"
    ibm_infosvr_groups:
      dsadm: "{{ ibm_infosvr_group_dsadmin }}"
      db2iadm1: "{{ ibm_infosvr_group_db2_instance }}"
    ibm_infosvr_upwds:
      isadmin: "{{ ibm_infosvr_upwd_isadmin }}"
      db2inst1: "{{ ibm_infosvr_upwd_db2_instance }}"
    ibm_infosvr_locations:
      linux: "{{ ibm_infosvr_install_location.linux }}"
      win: "{{ ibm_infosvr_install_location.win }}"
      db2: "{{ ibm_infosvr_install_location.db2 }}"
      was: "{{ ibm_infosvr_install_location.was }}"
    ibm_infosvr_ports_ext:
      console: "{{ ibm_infosvr_ports.console }}"
      db2: "{{ ibm_infosvr_ports.db2 }}"
      zookeeper: "{{ ibm_infosvr_ports.zookeeper }}"
      solr: "{{ ibm_infosvr_ports.solr }}"
      kafka: "{{ ibm_infosvr_ports.kafka }}"
  listen:
    - "set IBM InfoSphere Information Server variables"
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: setup external db variable
  set_fact:
    __ibm_infosvr_use_external_db: "{{ ibm_infosvr_hosts.exdb != '' }}"
  listen:
    - "set IBM InfoSphere Information Server variables"
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: set database host
  set_fact:
    __ibm_infosvr_db_host: "{% if __ibm_infosvr_use_external_db %}{{ ibm_infosvr_hosts.exdb }}{% else %}{{ ibm_infosvr_hosts.repo }}{% endif %}"
  listen:
    - "set IBM InfoSphere Information Server variables"
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: setup unified governance external service IPs
  set_fact:
    __ibm_infosvr_k8s_externals:
      domain: "{{ hostvars[ibm_infosvr_hosts.domain].ansible_fqdn }}"
      domain_ip: "{{ hostvars[ibm_infosvr_hosts.domain].ansible_default_ipv4.address }}"
      repo: "{{ hostvars[__ibm_infosvr_db_host].ansible_fqdn }}"
      repo_ip: "{{ hostvars[__ibm_infosvr_db_host].ansible_default_ipv4.address }}"
  listen:
    - "set IBM InfoSphere Information Server variables"
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: default any missing features to disabled
  set_fact:
    __ibm_infosvr_features:
      opsdb: "{% if ibm_infosvr_features.opsdb is defined %}{{ ibm_infosvr_features.opsdb }}{% else %}False{% endif %}"
      ia: "{% if ibm_infosvr_features.ia is defined %}{{ ibm_infosvr_features.ia }}{% else %}False{% endif %}"
      igc: "{% if ibm_infosvr_features.igc is defined %}{{ ibm_infosvr_features.igc }}{% else %}False{% endif %}"
      dataclick: "{% if ibm_infosvr_features.dataclick is defined %}{{ ibm_infosvr_features.dataclick }}{% else %}False{% endif %}"
      masking: "{% if ibm_infosvr_features.masking is defined %}{{ ibm_infosvr_features.masking }}{% else %}False{% endif %}"
      event_mgmt: "{% if ibm_infosvr_features.event_mgmt is defined %}{{ ibm_infosvr_features.event_mgmt }}{% else %}False{% endif %}"
      qs: "{% if ibm_infosvr_features.qs is defined %}{{ ibm_infosvr_features.qs }}{% else %}False{% endif %}"
      wisd: "{% if ibm_infosvr_features.wisd is defined %}{{ ibm_infosvr_features.wisd }}{% else %}False{% endif %}"
      fasttrack: "{% if ibm_infosvr_features.fasttrack is defined %}{{ ibm_infosvr_features.fasttrack }}{% else %}False{% endif %}"
      dqec: "{% if ibm_infosvr_features.dqec is defined %}{{ ibm_infosvr_features.dqec }}{% else %}False{% endif %}"
      ml_term_assignment: "{% if ibm_infosvr_features.ml_term_assignment is defined %}{{ ibm_infosvr_features.ml_term_assignment }}{% else %}False{% endif %}"
      igd: "{% if ibm_infosvr_features.igd is defined %}{{ ibm_infosvr_features.igd }}{% else %}False{% endif %}"
      wlp: "{% if ibm_infosvr_features.wlp is defined %}{{ ibm_infosvr_features.wlp }}{% else %}False{% endif %}"
  listen:
    - "set IBM InfoSphere Information Server variables"
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: check status of Information Server services
  command: /usr/sbin/ss -tln -H
  register: __ibm_infosvr_status
  when: ('ibm-information-server-clients' not in group_names)
  listen:
    - "status IBM InfoSphere Information Server"

- assert:
    that:
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.db2 | string) + ' ') > 0"
    msg: "Repository tier is not fully operational."
  when: ('ibm-information-server-repo' in group_names or 'ibm-information-server-external-db' in group_names)
  listen:
    - "status IBM InfoSphere Information Server"

- assert:
    that:
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.console | string) + ' ') > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.admin | string) + ' ') > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.default | string) + ' ' ) > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.secure_admin | string) + ' ' ) > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.bootstrap | string) + ' ' ) > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.ipc_connector | string) + ' ' ) > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.mutual_auth_listener | string) + ' ' ) > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.orb_listener | string) + ' ' ) > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.server_auth_listener | string) + ' ' ) > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.soap_connector | string) + ' ' ) > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.zookeeper | string) + ' ' ) > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.solr | string) + ' ' ) > 0"
      - "__ibm_infosvr_status.stdout.find(':' + (ibm_infosvr_ports.kafka | string) + ' ' ) > 0"
    msg: "Domain tier is not fully operational."
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "status IBM InfoSphere Information Server"

- assert:
    that:
      - "__ibm_infosvr_status.stdout.find(':' + ibm_infosvr_ports.dsrpc + ' ') > 0"
      - "__ibm_infosvr_status.stdout.find(':' + ibm_infosvr_ports.isf_agent + ' ') > 0"
      - "__ibm_infosvr_status.stdout.find(':' + ibm_infosvr_ports.isf_agent_object + ' ') > 0"
      - "__ibm_infosvr_status.stdout.find(':' + ibm_infosvr_ports.jobmon_port1 + ' ') > 0"
      - "__ibm_infosvr_status.stdout.find(':' + ibm_infosvr_ports.jobmon_port2 + ' ') > 0"
    msg: "Port {{ item }} is not listening."
  when: ('ibm-information-server-engine' in group_names)
  listen:
    - "status IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server Data Flow Designer
  shell: "./stopCognitiveDesignerServer.sh"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBNode/CognitiveDesignerEngine"
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names) and __ibm_infosvr_version == "11.7"
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server DataStage services
  shell: "cd `cat /.dshome` && . dsenv && ./bin/uv -admin -stop"
  args:
    executable: /bin/bash
  become_user: "{{ ibm_infosvr_user_dsadmin }}"
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server NodeAgents
  shell: ". `cat /.dshome`/dsenv && ./NodeAgents.sh stop"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBNode/bin"
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server DSAppWatcher
  shell: "./DSAppWatcher.sh -stop"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/Server/DSODB/bin"
  become_user: "{{ ibm_infosvr_user_dsadmin }}"
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names) and __ibm_infosvr_features.opsdb
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server application server
  shell: "./MetadataServer.sh stop"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBServer/bin"
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server Kafka
  systemd: state=stopped name=InfoSrvKafka
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: stop IBM InfoSphere Information Server Solr
  systemd: state=stopped name=InfoSrvSolrCloud
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: stop IBM InfoSphere Information Server Zookeeper
  systemd: state=stopped name=InfoSrvZookeeper
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: stop IBM InfoSphere Information Server ODFEngine (v11.7)
  systemd: state=stopped name=ODFEngine
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names) and __ibm_infosvr_version == "11.7"
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

#- name: list any remaining Java processes
#  shell: >
#          ps -e -o pid,command | grep '{{ ibm_infosvr_install_location.linux }}/jdk/bin/java' | grep -v 'grep' | awk '{ print $1 }'
#  become_user: root
#  become: yes
#  changed_when: False
#  when: ('ibm-information-server-domain' in group_names)
#  register: __ibm_infosvr_stale_java_processes
#  listen:
#    - "restart IBM InfoSphere Information Server"
#    - "stop IBM InfoSphere Information Server"
#    - "re-generate config for open source utilities"
#
#- name: force exit any remaining Java processes
#  shell: >
#          kill {{ item }}
#  become_user: root
#  become: yes
#  changed_when: False
#  with_items: "{{ __ibm_infosvr_stale_java_processes.stdout_lines }}"
#  when: ('ibm-information-server-domain' in group_names)
#  listen:
#    - "restart IBM InfoSphere Information Server"
#    - "stop IBM InfoSphere Information Server"
#    - "re-generate config for open source utilities"

- name: re-generate open source utilities configuration
  shell: "{{ item }}"
  with_items:
    - "{{ ibm_infosvr_install_location.linux }}/shared-open-source/zookeeper/update-config.sh"
    - "{{ ibm_infosvr_install_location.linux }}/shared-open-source/solr/update-config.sh"
    - "{{ ibm_infosvr_install_location.linux }}/shared-open-source/kafka/update-config.sh"
  become_user: root
  become: yes
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "re-generate config for open source utilities"

- name: start IBM InfoSphere Information Server Zookeeper
  systemd: state=started name=InfoSrvZookeeper
  become_user: root
  become: yes
  retries: 3
  delay: 5
  register: __ibm_infosvr_os_start_zookeeper_result
  until: __ibm_infosvr_os_start_zookeeper_result.status is defined and __ibm_infosvr_os_start_zookeeper_result.status.Result == "success"
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: confirm Zookeeper is running
  wait_for:
    port: "{{ ibm_infosvr_ports_ext.zookeeper }}"
    host: "{{ ibm_infosvr_hosts.domain }}"
    state: started
    delay: 10
    timeout: 300
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: start IBM InfoSphere Information Server Solr
  systemd: state=started name=InfoSrvSolrCloud
  become_user: root
  become: yes
  retries: 3
  delay: 5
  register: __ibm_infosvr_os_start_solr_result
  until: __ibm_infosvr_os_start_solr_result.status is defined and __ibm_infosvr_os_start_solr_result.status.Result == "success"
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: confirm Solr is running
  wait_for:
    port: "{{ ibm_infosvr_ports_ext.solr }}"
    host: "{{ ibm_infosvr_hosts.domain }}"
    state: started
    delay: 10
    timeout: 300
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: start IBM InfoSphere Information Server Kafka
  systemd: state=started name=InfoSrvKafka
  become_user: root
  become: yes
  retries: 3
  delay: 5
  register: __ibm_infosvr_os_start_kafka_result
  until: __ibm_infosvr_os_start_kafka_result.status is defined and __ibm_infosvr_os_start_kafka_result.status.Result == "success"
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: confirm Kafka is running
  wait_for:
    port: "{{ ibm_infosvr_ports_ext.kafka }}"
    host: "{{ ibm_infosvr_hosts.domain }}"
    state: started
    delay: 10
    timeout: 300
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: start IBM InfoSphere Information Server ODFEngine (v11.7)
  systemd: state=started name=ODFEngine
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names) and __ibm_infosvr_version == "11.7"
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
    - "re-generate config for open source utilities"

- name: start IBM InfoSphere Information Server application server
  shell: "./MetadataServer.sh run"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBServer/bin"
  become_user: root
  become: yes
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: confirm application server is running
  wait_for:
    port: "{{ ibm_infosvr_ports_ext.console }}"
    host: "{{ ibm_infosvr_hosts.domain }}"
    state: started
    delay: 10
    timeout: 300
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server NodeAgents
  shell: ". `cat /.dshome`/dsenv && ./NodeAgents.sh start"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBNode/bin"
  become_user: root
  become: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server DataStage services
  shell: "cd `cat /.dshome` && . dsenv && ./bin/uv -admin -start"
  args:
    executable: /bin/bash
  become_user: "{{ ibm_infosvr_user_dsadmin }}"
  become: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server DSAppWatcher
  shell: "./DSAppWatcher.sh -start"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/Server/DSODB/bin"
  become_user: "{{ ibm_infosvr_user_dsadmin }}"
  become: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names) and __ibm_infosvr_features.opsdb
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server Data Flow Designer
  shell: "./startCognitiveDesignerServer.sh"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBNode/CognitiveDesignerEngine"
  become_user: root
  become: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names) and __ibm_infosvr_version == "11.7"
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
