---
###
# Copyright 2018 IBM Corp. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

- name: drain IBM InfoSphere Information Server k8s node
  shell: "kubectl drain {{ hostvars[inventory_hostname].ansible_fqdn }} --delete-local-data"
  args:
    executable: /bin/bash
  become_user: "{{ ibm_infosvr_user_k8s }}"
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-ug' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: remove all running IBM InfoSphere Information Server pods
  shell: "kubectl get pods | cut -d' ' -f 1 | grep -v 'NAME' | xargs kubectl delete pod"
  args:
    executable: /bin/bash
  become_user: "{{ ibm_infosvr_user_k8s }}"
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-ug' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server Data Flow Designer
  shell: "./stopCognitiveDesignerServer.sh"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBNode/CognitiveDesignerEngine"
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server DataStage services
  shell: "cd `cat /.dshome` && . dsenv && ./bin/uv -admin -stop"
  args:
    executable: /bin/bash
  become_user: "{{ ibm_infosvr_user_dsadmin }}"
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server NodeAgents
  shell: "./NodeAgents.sh stop"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBNode/bin"
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server DSAppWatcher
  shell: "./DSAppWatcher.sh -stop"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/Server/DSODB/bin"
  become_user: "{{ ibm_infosvr_user_dsadmin }}"
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names) and __ibm_infosvr_features.opsdb
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server application server
  shell: "./MetadataServer.sh stop"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBServer/bin"
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server open source utilities
  systemd: state=stopped name={{ item }}
  become_user: root
  become: yes
  ignore_errors: yes
  with_items:
    - "InfoSrvKafka"
    - "InfoSrvSolrCloud"
    - "InfoSrvZookeeper"
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: stop IBM InfoSphere Information Server ODFEngine (v11.7)
  systemd: state=stopped name=ODFEngine
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-domain' in group_names) and __ibm_infosvr_version == "11.7"
  listen:
    - "restart IBM InfoSphere Information Server"
    - "stop IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server open source utilities
  systemd: state=started name={{ item }}
  become_user: root
  become: yes
  ignore_errors: yes
  with_items:
    - "InfoSrvZookeeper"
    - "InfoSrvSolrCloud"
    - "InfoSrvKafka"
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server ODFEngine (v11.7)
  systemd: state=started name=ODFEngine
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-domain' in group_names) and __ibm_infosvr_version == "11.7"
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server application server
  shell: "./MetadataServer.sh run"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBServer/bin"
  become_user: root
  become: yes
  changed_when: False
  when: ('ibm-information-server-domain' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server NodeAgents
  shell: "./NodeAgents.sh start"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBNode/bin"
  become_user: root
  become: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server DataStage services
  shell: "cd `cat /.dshome` && . dsenv && ./bin/uv -admin -start"
  args:
    executable: /bin/bash
  become_user: "{{ ibm_infosvr_user_dsadmin }}"
  become: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server DSAppWatcher
  shell: "./DSAppWatcher.sh -start"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/Server/DSODB/bin"
  become_user: "{{ ibm_infosvr_user_dsadmin }}"
  become: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names) and __ibm_infosvr_features.opsdb
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: start IBM InfoSphere Information Server Data Flow Designer
  shell: "./startCognitiveDesignerServer.sh"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBNode/CognitiveDesignerEngine"
  become_user: root
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-engine' in group_names) and __ibm_infosvr_version == "11.7"
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"

- name: uncordon IBM InfoSphere Information Server k8s node
  shell: "kubectl uncordon {{ hostvars[inventory_hostname].ansible_fqdn }}"
  args:
    executable: /bin/bash
  become_user: "{{ ibm_infosvr_user_k8s }}"
  become: yes
  ignore_errors: yes
  changed_when: False
  when: ('ibm-information-server-ug' in group_names)
  listen:
    - "restart IBM InfoSphere Information Server"
    - "start IBM InfoSphere Information Server"
