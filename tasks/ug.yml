---
###
# Copyright 2018 IBM Corp. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

- import_tasks: refresh_install_details.yml

- name: ug - open up limits
  pam_limits:
    domain: '*'
    limit_type: '-'
    limit_item: "{{ item.key }}"
    value: "{{ item.value }}"
    use_max: yes
  with_items:
    - { key: "nproc", value: "100000" }
    - { key: "nofile", value: "1024000" }
    - { key: "sigpending", value: "6341600" }
    - { key: "memlock", value: "6400" }
    - { key: "msgqueue", value: "81920000" }
    - { key: "stack", value: "819200" }
    - { key: "fsize", value: "62914530" }

- name: ug - confirm repository tier is running and accessible
  wait_for:
    port: "{{ ibm_infosvr_ports.db2 }}"
    host: "{{ groups['ibm-information-server-repo'][0] }}"
    state: started
    delay: 10
    timeout: 300

- name: ug - confirm domain tier is running and accessible
  wait_for:
    port: "{{ item }}"
    host: "{{ groups['ibm-information-server-domain'][0] }}"
    state: started
    delay: 10
    timeout: 300
  with_items:
    - "{{ ibm_infosvr_ports.console }}"
#    - "{{ ibm_infosvr_ports.zookeeper }}"
#    - "{{ ibm_infosvr_ports.kafka }}"

#- name: ug - update all existing packages
#  yum: state=latest name=*

- name: ug - check installed search media
  shell: "docker images"
  register: __ibm_infosvr_ug_installed_docker_images
  ignore_errors: True
  changed_when: False

- name: ug - clean yum repository
  shell: "yum clean all"
  args:
    executable: /bin/bash
  when: __ibm_infosvr_ug_installed_docker_images.stdout.find('igc-docker-local') == -1

- name: ug - install common and ug-specific packages
  yum: state=latest name={{ item }}
  with_items:
    - libselinux-python
    - zip
    - unzip
    - glibc.i686
    - libstdc++.i686
    - libXp
    - libXau
    - libXext
    - libX11
    - libxcb
    - libgcc.i686
    - libXmu
    - pam.i686
    - net-tools
    - bind-utils
    - nss-softokn-freebl
    - bc
    - iptables-services
    - compat-libstdc++-33
    - libXtst
    - elfutils
    - wget
    - lvm2
    - ebtables
    - ethtool
    - haproxy

- name: ug - disable selinux
  selinux: state=disabled
  register: __ibm_infosvr_ug_selinux_result

- name: ug - restart host
  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: __ibm_infosvr_ug_selinux_result.changed

- name: ug - wait for restart
  local_action: wait_for host={{ ansible_hostname }} state=started delay=5 timeout=300
  become: no
  when: __ibm_infosvr_ug_selinux_result.changed

- name: ug - parse UG-specific variables
  include_vars: file=ug.yml

- import_tasks: kernel-and-firewall.yml

- name: ug - disable swap (not allowed by k8s)
  shell: "swapoff -a"
  when: __ibm_infosvr_ug_installed_docker_images.stdout.find('igc-docker-local') == -1

- name: ug - copy files fetched from domain tier
  copy:
    src: cache/{{ item.name }}
    dest: /tmp/{{ item.name }}
    mode: "{{ item.mode }}"
    force: no
  with_items:
    - { name: "kubeselfextract.bsx", mode: "0755" }
    - { name: "tokenservicepublic.cer", mode: "0644" }
  when: __ibm_infosvr_ug_installed_docker_images.stdout.find('igc-docker-local') == -1

- name: ug - apply response file template
  template:
    src: uginfo.rsp.j2
    dest: /tmp/uginfo.rsp
  when: __ibm_infosvr_ug_installed_docker_images.stdout.find('igc-docker-local') == -1

- name: ug - create installation location
  file: path={{ ibm_infosvr_install_location.ises }} state=directory owner=root group=root mode=0755
  when: __ibm_infosvr_ug_installed_docker_images.stdout.find('igc-docker-local') == -1

- name: ug - copy install media
  copy:
    src: "{{ ibm_infosvr_media_dir }}/{{ ibm_infosvr_media_bin.ug_tarball }}"
    dest: "{{ ibm_infosvr_tmp.ises }}/{{ ibm_infosvr_media_bin.ug_tarball }}"

# Installer relies on root-level passwordless SSH being configured within the host itself
- name: ug - check existence of SSH key
  stat: path="~/.ssh/id_rsa"
  register: __ibm_infosvr_ug_ssh_key

- name: ug - generate SSH key
  shell: ssh-keygen -t rsa -f ~/.ssh/id_rsa -P ''
  when: not __ibm_infosvr_ug_ssh_key.stat.exists

- name: ug - add generated key to authorized keys
  shell: cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
  when: not __ibm_infosvr_ug_ssh_key.stat.exists

##########
# BASE INSTALLATION
- name: ug - install UG (ISES) tier silently
  shell:  /tmp/kubeselfextract.bsx
  when: __ibm_infosvr_ug_installed_docker_images.stdout.find('igc-docker-local') == -1
  notify: restart IBM InfoSphere Information Server

- name: ug - ensure all pods are running before proceeding
  shell: "kubectl get pods --no-headers=true | awk '{ print $2 }'"
  args:
    executable: /bin/bash
  become_user: "{{ ibm_infosvr_user_k8s }}"
  become: yes
  changed_when: False
  register: __ibm_infosvr_ug_k8s_pods_status
  until: (__ibm_infosvr_ug_k8s_pods_status.stdout_lines|unique|sort) == ['1/1','2/2']
  retries: 48
  delay: 10
